From: nabijaczleweli <nabijaczleweli@gmail.com>
Date: Fri, 10 Jan 2020 07:48:20 +0100
Subject: [BPO: 1.8.0+ng4] Move LogLevel to mod options

---
 src/main.rs    |  8 ++++----
 src/ops/mod.rs | 26 +-------------------------
 src/options.rs | 25 ++++++++++++++++++++++++-
 3 files changed, 29 insertions(+), 30 deletions(-)

diff --git a/src/main.rs b/src/main.rs
index da4d213..c800901 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -39,7 +39,7 @@ pub mod ops;
 pub mod util;
 
 pub use error::Error;
-pub use options::Options;
+pub use options::{LogLevel, Options};
 
 use std::mem;
 use iron::Iron;
@@ -103,7 +103,7 @@ fn result_main() -> Result<(), Error> {
                        &opts.tls_data)
     }?;
 
-    if opts.loglevel < ops::LogLevel::NoStartup {
+    if opts.loglevel < options::LogLevel::NoStartup {
         print!("{}Hosting \"{}\" on port {}",
                trivial_colours::Reset,
                opts.hosted_directory.0,
@@ -124,7 +124,7 @@ fn result_main() -> Result<(), Error> {
         }
         println!("...");
     }
-    if !opts.path_auth_data.is_empty() && opts.loglevel < ops::LogLevel::NoAuth {
+    if !opts.path_auth_data.is_empty() && opts.loglevel < options::LogLevel::NoAuth {
         println!("Basic authentication credentials:");
 
         let mut out = TabWriter::new(stdout());
@@ -145,7 +145,7 @@ fn result_main() -> Result<(), Error> {
 
         out.flush().unwrap();
     }
-    if opts.loglevel < ops::LogLevel::NoStartup {
+    if opts.loglevel < options::LogLevel::NoStartup {
         println!("Ctrl-C to stop.");
         println!();
     }
diff --git a/src/ops/mod.rs b/src/ops/mod.rs
index 97b1fb3..cc10282 100644
--- a/src/ops/mod.rs
+++ b/src/ops/mod.rs
@@ -14,10 +14,10 @@ use std::default::Default;
 use rand::{Rng, thread_rng};
 use iron::modifiers::Header;
 use iron::url::Url as GenericUrl;
-use self::super::{Options, Error};
 use mime_guess::guess_mime_type_opt;
 use hyper_native_tls::NativeTlsServer;
 use std::collections::{BTreeMap, HashMap};
+use self::super::{LogLevel, Options, Error};
 use std::io::{self, SeekFrom, Write, Read, Seek};
 use std::process::{ExitStatus, Command, Child, Stdio};
 use rfsapi::{RawFsApiHeader, FilesetData, RawFileData};
@@ -1213,30 +1213,6 @@ impl Clone for HttpHandler {
 }
 
 
-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]
-pub enum LogLevel {
-    /// Write everything
-    All,
-    /// No serving messages
-    NoServeStatus,
-    /// No startup messages, but yes auth data
-    NoStartup,
-    /// No auth data
-    NoAuth,
-}
-
-impl From<u64> for LogLevel {
-    fn from(raw: u64) -> LogLevel {
-        match raw {
-            0 => LogLevel::All,
-            1 => LogLevel::NoServeStatus,
-            2 => LogLevel::NoStartup,
-            _ => LogLevel::NoAuth,
-        }
-    }
-}
-
-
 /// Attempt to start a server on ports from `from` to `up_to`, inclusive, with the specified handler.
 ///
 /// If an error other than the port being full is encountered it is returned.
diff --git a/src/options.rs b/src/options.rs
index 52a8eb7..1401550 100644
--- a/src/options.rs
+++ b/src/options.rs
@@ -14,7 +14,6 @@
 use clap::{AppSettings, ErrorKind as ClapErrorKind, Error as ClapError, Arg, App};
 use std::collections::btree_map::{BTreeMap, Entry as BTreeMapEntry};
 use std::collections::BTreeSet;
-use self::super::ops::LogLevel;
 use std::env::{self, temp_dir};
 use std::path::PathBuf;
 use std::str::FromStr;
@@ -29,6 +28,30 @@ lazy_static! {
 }
 
 
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]
+pub enum LogLevel {
+    /// Write everything
+    All,
+    /// No serving messages
+    NoServeStatus,
+    /// No startup messages, but yes auth data
+    NoStartup,
+    /// No auth data
+    NoAuth,
+}
+
+impl From<u64> for LogLevel {
+    fn from(raw: u64) -> LogLevel {
+        match raw {
+            0 => LogLevel::All,
+            1 => LogLevel::NoServeStatus,
+            2 => LogLevel::NoStartup,
+            _ => LogLevel::NoAuth,
+        }
+    }
+}
+
+
 /// Representation of the application's all configurable values.
 #[derive(Debug, Clone, Hash, PartialEq, Eq)]
 pub struct Options {
