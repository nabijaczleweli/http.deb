From: nabijaczleweli <nabijaczleweli@gmail.com>
Date: Sun, 23 Feb 2020 15:17:42 +0100
Subject: Add binary for generating shell completion files

---
 Cargo.toml                    |  6 ++++++
 src/http-build-completions.rs | 23 +++++++++++++++++++++++
 src/options.rs                | 10 +++++++---
 3 files changed, 36 insertions(+), 3 deletions(-)
 create mode 100644 src/http-build-completions.rs

diff --git a/Cargo.toml b/Cargo.toml
index 8875e0f..3001ecb 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -76,6 +76,12 @@ path = "src/main.rs"
 test = false
 doc = false
 
+[[bin]]
+name = "http-build-completions"
+path = "src/http-build-completions.rs"
+test = false
+doc = false
+
 
 [package.metadata.deb]
 name = "http"
diff --git a/src/http-build-completions.rs b/src/http-build-completions.rs
new file mode 100644
index 0000000..c5614e1
--- /dev/null
+++ b/src/http-build-completions.rs
@@ -0,0 +1,23 @@
+#[macro_use]
+extern crate lazy_static;
+extern crate regex;
+extern crate cidr;
+#[macro_use]
+extern crate clap;
+extern crate iron;
+
+mod options;
+
+pub use options::{Options, LogLevel};
+
+use clap::Shell;
+
+
+fn main() {
+    let mut app = Options::app();
+    for &shell in &[Shell::Bash, Shell::Zsh, Shell::Fish] {
+        for &bin in &["http", "httplz"] {
+            app.gen_completions(bin, shell, ".");
+        }
+    }
+}
diff --git a/src/options.rs b/src/options.rs
index 06026ee..2e09161 100644
--- a/src/options.rs
+++ b/src/options.rs
@@ -111,9 +111,8 @@ pub struct Options {
 }
 
 impl Options {
-    /// Parse `env`-wide command-line arguments into an `Options` instance
-    pub fn parse() -> Options {
-        let matches = App::new("http")
+    pub fn app() -> App<'static, 'static> {
+        App::new("http")
             .version(crate_version!())
             .author(crate_authors!("\n"))
             .about(crate_description!())
@@ -148,6 +147,11 @@ impl Options {
                 .validator(|s| Options::mime_type_override_parse(s.into()).map(|_| ())))
             .arg(Arg::from_usage("--request-bandwidth [BYTES] 'Limit each request to returning BYTES per second, or 0 for unlimited. Default: 0'")
                 .validator(|s| Options::bandwidth_parse(s.into()).map(|_| ())))
+    }
+
+    /// Parse `env`-wide command-line arguments into an `Options` instance
+    pub fn parse() -> Options {
+        let matches = Options::app()
             .get_matches();
 
         let dir = matches.value_of("DIR").unwrap_or(".");
